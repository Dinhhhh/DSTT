# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AxDONQVprxafpUbt2dXEb48qcINSr5dD
"""

import numpy as np

a = np.array([1, 2, 3])
b = np.array([4, 5, 6])

tich = np.inner(a, b)8
print(tich)

import numpy as np

a = np.array([1, 2, -3])
print(np.linalg.norm(a))

a = np.array([1,2,-3])
np.linalg.norm(a, 1)

import numpy as np

def chuan(a, p):
    return np.sum(np.abs(a)**p)**(1/p)

a = np.array([1,2,-3])

print(chuan(a, 1))
print(np.linalg.norm(a, 1))

print(chuan(a, 2))
print(np.linalg.norm(a, 2))

print(chuan(a, 3))
print(np.linalg.norm(a, 3))

print(chuan(a, 1000))
print(np.linalg.norm(a, 1000))
from scipy import linalg
linalg.norm(a)
linalg.norm(a, 100)
linalg.norm(a, 1000)

import numpy as np

m = 10
v1 = np.array([5, -4, 3])
v2 = np.array([4, 3, -2])
v3 = np.array([-4, -3, -1])
v4 = np.array([-9, 8, 6])
mi = np.array([2, 5, 2, 1])

M = np.array([v1, v2, v3, v4])
MT = M.transpose()

print(MT)

v = (1.0 / m) * MT.dot(mi)
print(v)

import numpy as np

A = np.array([[0.998, 0.136],
              [0.002, 0.864]])

v0 = np.array([0.95, 0.05])

A_100 = np.linalg.matrix_power(A, 100)

v_100 = A_100.dot(v0)

print("Vector trạng thái sau 100 tuần:", v_100)
print("Tỉ lệ người có việc làm:", v_100[0])
print("Tỉ lệ người thất nghiệp:", v_100[1])

import sympy as sym

x, y = sym.symbols('x y')
xy = sym.Matrix([x, y])

A = sym.Matrix([[1, -68],
                [1, 1]])

v = sym.Matrix([0, 1])


nghiem = sym.solve([A*xy - v], (x, y))

print(sym.pretty(nghiem))

import sympy as sym

A = sym.Matrix([[1, 6],
                [5, 2]])

u = sym.Matrix([6, -5])

Au = A * u

minus_4_u = -4 * u

print("Au =")
sym.pprint(Au)

print("-4u =")
sym.pprint(minus_4_u)

print("Kiểm tra Au == -4u:", Au == minus_4_u)

import sympy as sym

Lambda = sym.symbols('Lambda')
I = sym.eye(2)

A = sym.Matrix([[2, 3],
                [3, -6]])

char_eq = sym.Eq(sym.det(Lambda * I - A), 0)

eigenvalues = sym.solve(char_eq, Lambda)

print("Các trị riêng:")
print([sym.N(ev, 4) for ev in eigenvalues])
print(sym.pretty(eigenvalues))

lambda_val = 3
x, y = sym.symbols('x y')

A = sym.Matrix([[2, 3],
                [3, -6]])

I = sym.eye(2)
M = A - lambda_val * I

v = sym.Matrix([x, y])
eqs = M * v

eq1 = sym.Eq(eqs[0], 0)
eq2 = sym.Eq(eqs[1], 0)

vec_sol = sym.solve([eq1, eq2], (x, y), dict=True)

print("Tập vector riêng ứng với trị riêng λ=3:")
print(vec_sol)

import numpy as np
from numpy import linalg as LA

A = np.array([[2, 3],
              [3, -6]])

D = np.array([[-7, 0],
              [0, 3]])

P = np.array([[-1.0/3, 3],
              [1, 1]])
P_inv = LA.inv(P)
print("P^-1 =")
print(P_inv)
print("A.dot(P) =")
print(A.dot(P))

print("P.dot(D) =")
print(P.dot(D))
A_1000 = P @ (D ** 1000) @ P_inv
print("A^1000 =")
print(A_1000)
print("D^2 =")
print(D ** 2)

import numpy as np
import math

a = np.array([1, 2, 3])

mag1 = np.sqrt(a.dot(a))
print("Chuẩn 2 bằng dot():", mag1)

import numpy as np


def khoang_cach(a, b):
    return np.linalg.norm(a - b)


def tinh_goc(u, v):
    cos_theta = np.dot(u, v) / (np.linalg.norm(u) * np.linalg.norm(v))

    cos_theta = np.clip(cos_theta, -1.0, 1.0)
    theta = np.arccos(cos_theta)
    return theta


def phep_chieu(u, v):
    return (np.dot(u, v) / np.dot(v, v)) * v


u = np.array([1, 2, 3])
v = np.array([4, 5, 6])


kc = khoang_cach(u, v)
print("Khoảng cách giữa u và v:", kc)


goc = tinh_goc(u, v)
print("Góc giữa u và v (radian):", goc)


goc_do = np.degrees(goc)
print("Góc giữa u và v (độ):", goc_do)

p = phep_chieu(u, v)
print("Phép chiếu trực giao của u lên v:", p)